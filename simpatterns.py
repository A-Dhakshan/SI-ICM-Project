import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage as nd
from PIL import Image
import tifffile
import csv

k=2
xx = np.linspace(-192,192,1024) 
phasedeg = np.array([0,72,144,216,288]) #angles for phase and rotation
phaserad = np.deg2rad(phasedeg)
sims = []

# Generate the base structure from formula
for i in phaserad:
    a = 1 + np.cos(k*xx + i)
    b = np.tile(a,(1024,1))
    sims.append(b)

for i in range(len(sims)):
    plt.imsave(f'raw_files/sim{i}.tiff',sims[i])

#for naming variables orderly using the iteration of the for loop itself
for x in range(5):
    globals()['sim%s' % x] = Image.open(f'raw_files/sim{x}.tiff')

patterns = []

#rotating each of the 5 phases by 5 different angles to get a total of 25 patterns
for degree in phasedeg:
    rotated_img0 = nd.rotate(sim0, degree)[619:683,619:683].mean(axis=2)
    rotated_img0[rotated_img0 <= 180] = 0
    rotated_img0[rotated_img0 > 180] = 1
    patterns.append(rotated_img0)
    
    rotated_img1 = nd.rotate(sim1, degree)[619:683,619:683].mean(axis=2)
    rotated_img1[rotated_img1 <= 180] = 0
    rotated_img1[rotated_img1 > 180] = 1
    patterns.append(rotated_img1)
    
    rotated_img2 = nd.rotate(sim2, degree)[619:683,619:683].mean(axis=2)
    rotated_img2[rotated_img2 <= 180] = 0
    rotated_img2[rotated_img2 > 180] = 1
    patterns.append(rotated_img2)

    rotated_img3 = nd.rotate(sim3, degree)[619:683,619:683].mean(axis=2)
    rotated_img3[rotated_img3 <= 180] = 0
    rotated_img3[rotated_img3 > 180] = 1
    patterns.append(rotated_img3)

    rotated_img4 = nd.rotate(sim4, degree)[619:683,619:683].mean(axis=2)
    rotated_img4[rotated_img4 <= 180] = 0
    rotated_img4[rotated_img4 > 180] = 1
    patterns.append(rotated_img4)

Iraw = np.array(plt.imread('raw_files/2 pixel gap.bmp'))[:,:,0] #ground truth image
structured = np.asarray([(i * Iraw) for i in patterns]) #combining structured illumination with the object image

for i in range(25):
    data_arr = np.array(structured[i,:,:], np.uint8)  # Convert random_data to NumPy array of type 'uint8'
    pil_image = Image.fromarray(data_arr)  # Convert the NumPy array to PIL image
    pil_image.save(f'raw_files/sim{i}.bmp')

reconstruct = []


#the following parts performed icm for the structured images    
for i in range(25):
    results = []
    with open(f"raw_files/sim{i}.csv") as csvfile: #this is the file containing the data of 200 frames generated by the SOFI tool
        reader = csv.reader(csvfile, quoting=csv.QUOTE_NONNUMERIC) # change contents to floats
        for row in reader: # each row is a list
            results.append(row)
        
    results = np.asarray(results)
    globals()['pat%s' % i] = np.zeros([64,64,200])
    for j in range(200):
        a = results[:,(i*64):(i*64)+64]
        globals()['pat%s' % i][:,:,j] = a
    globals()['pat%s' % i] = globals()['pat%s' % i].mean(axis=2)


fig1 = plt.figure(figsize=(15, 15))
rows = 5
columns = 5

for i in range(25):
        reconstruct.append(globals()['pat%s' % i])
        fig1.add_subplot(rows, columns, i+1)
        plt.imshow(globals()['pat%s' % i],cmap='hot')
        plt.axis('off') 

plt.subplots_adjust(wspace=0.05, hspace=0.05)
plt.tight_layout()
plt.show()  #when using savefig, remove show. otherwise only a blank image will be saved.
#plt.savefig('results/structured_toprocess.png')

#save to the file to be reconstructed using deconvolution.py
reconstruct = np.array(reconstruct)
tifffile.imwrite('raw_files/reconstruct.tif',reconstruct)
